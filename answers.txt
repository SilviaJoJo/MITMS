【1】Course Overview + the Shell
1.For this course, you need to be using a Unix shell like Bash or ZSH. If you are on Linux or macOS, you don’t have to do
anything special. If you are on Windows, you need to make sure you are not running cmd.exe or PowerShell; you can use 
Windows Subsystem for Linux or a Linux virtual machine to use Unix-style command-line tools. To make sure you’re running
an appropriate shell, you can try the command [echo $SHELL]. If it says something like [/bin/bash] or [/usr/bin/zsh],
that means you’re running the right program.
2.Create a new directory called missing under /tmp.
cd /tmp
mkdir missing
3.Look up the touch program. The man program is your friend.
Usage: Update the access and modification times of each FILE to the current time. (For the full version, use the command
[man touch], and then [q] to exit)
4.Use touch to create a new file called semester in missing.
touch semester
5.Write the following into that file, one line at a time:
#!/bin/sh
curl --head --silent https://missing.csail.mit.edu
The first line might be tricky to get working. It’s helpful to know that # starts a comment in Bash, and ! has a special
meaning even within double-quoted (") strings. Bash treats single-quoted strings (') differently: they will do the trick
in this case. See the Bash quoting manual page for more information.
echo '#!/bin/sh' > semester (use '' instead of "" to avoid undesired interpretation, for "#" can cause that)
echo 'curl --head --silent https://missing.csail.mit.edu' >> semester (use >> instead of > to add new contents to the end
of file, not rewriting it)
6.Try to execute the file, i.e. type the path to the script (./semester) into your shell and press enter. Understand why
it doesn’t work by consulting the output of ls (hint: look at the permission bits of the file).
Error: -bash: ./semester: Permission denied
Command: ls -l semester
Output: -rw-r--r-- 1 silviajojo silviajojo 61 Jun 24 17:22 semester (- shows it is a normal file, not a directory; rw- is
the permission of root user; r-- is the permission of user; r-- is the permission of everyone else; therefore we know, as
a user, we don't have the right to execute the file)
7.Run the command by explicitly starting the sh interpreter, and giving it the file semester as the first argument, i.e.
sh semester. Why does this work, while ./semester didn’t?
通过 sh semester 命令，Shell 解释器(Shell Interpreter)会读取 "semester" 文件的内容，并按照 Shell 脚本语法进行解释和执行，无论文
件是否具有可执行权限。这使得 sh semester 命令可以成功地运行 "semester" 文件。
8.Look up the chmod program (e.g. use man chmod).
chmod - short for "change mode", which can be used to change the permission mode of file/directory (For the full version,
use the command [man chmod], and then [q] to exit)
9.Use chmod to make it possible to run the command ./semester rather than having to type sh semester. How does your shell
know that the file is supposed to be interpreted using sh? See this page on the shebang line for more information.
1)chmod +x semester (this command adds execution permission to 3 levels, and it returns rwxr-xr-x as the permission status)
2)The shebang line（组织行）is a special comment that appears at the beginning of a script file and is used to indicate
which interpreter should be used to execute the script. It consists of the characters [#!] followed by the path to the
interpreter. For example, the shebang line #!/bin/sh at the beginning of a script file tells the system to use the sh
interpreter to execute the script. When you run the script file, the operating system reads the shebang line and uses
the specified interpreter to interpret and execute the remaining contents of the file.
10.Use | and > to write the “last modified” date output by semester into a file called last-modified.txt in your home
directory.
./semester | grep last-modified | cut -d ' ' -f 4- > ~/last-modified.txt
1)./semester is the command that generates output
Its full output is:
HTTP/2 200
server: GitHub.com
content-type: text/html; charset=utf-8
last-modified: Sat, 10 Jun 2023 13:13:30 GMT
access-control-allow-origin: *
etag: "648476fa-1f86"
expires: Sun, 25 Jun 2023 09:00:50 GMT
cache-control: max-age=600
x-proxy-cache: MISS
x-github-request-id: 95B6:204B:50D5FE:57D3A5:6497FFE9
accept-ranges: bytes
date: Sun, 25 Jun 2023 09:26:35 GMT
via: 1.1 varnish
age: 187
x-served-by: cache-hkg17926-HKG
x-cache: HIT
x-cache-hits: 2
x-timer: S1687685196.645275,VS0,VE1
vary: Accept-Encoding
x-fastly-request-id: 35194d500dbf998a7629e81f1ec2d0649fc74df1
content-length: 8070
2)| is the pipe operator used to redirect the output of the previous command (semester) as input to the next command 
cut)
3)grep last-modified: The grep command is used to filter the output and only keep the line containing "last-modified".
4)cut -d ' ' -f 2-: The cut command is used to extract the desired field from the input. In this case, we specify a
delimiter of a space (' '), and we select fields 2 (Sat) and beyond to capture the "last modified" date and any
subsequent fields.
5)>: The output redirection operator is used to redirect the final result to a file.
~/last-modified.txt: This specifies the path and filename where the output should be saved. ~ represents the home
directory.
11.Write a command that reads out your laptop battery’s power level or your desktop machine’s CPU temperature from /sys.
1)cat /sys/class/power_supply/BAT1/capacity (not the BAT version depends on your comupter)
2)cannot experiment on my computer
【2】Shell Tools and Scripting
1.Read man ls and write an ls command that lists files in the following manner

-Includes all files, including hidden files
-Sizes are listed in human readable format (e.g. 454M instead of 454279954)
-Files are ordered by recency
-Output is colorized

A sample output would look like this

 -rw-r--r--   1 user group 1.1M Jan 14 09:53 baz
 drwxr-xr-x   5 user group  160 Jan 14 09:53 .
 -rw-r--r--   1 user group  514 Jan 14 06:42 bar
 -rw-r--r--   1 user group 106M Jan 13 12:12 foo
 drwx------+ 47 user group 1.5K Jan 12 18:08 ..
ls -alht --color=auto (First of all, we use -a to list all files, including hidden files; then -l to use a long listing
format; then -h to show in human-readable format; then -t to sort by time, newest first; then --color=auto to colorize the
output; finally, all flags could be integrated into one)
2.Write bash functions marco and polo that do the following. Whenever you execute marco the current working directory
should be saved in some manner, then when you execute polo, no matter what directory you are in, polo should cd you back
to the directory where you executed marco. For ease of debugging you can write the code in a file marco.sh and (re)load
the definitions to your shell by executing source marco.sh.
see marco.sh
command: source marco.sh; marco; (maybe change to another dir) polo
3.Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time
consuming to get a failure run. Write a bash script that runs the following script until it fails and captures its
standard output and error streams to files and prints everything at the end. Bonus points if you can also report how many
runs it took for the script to fail.

 #!/usr/bin/env bash

 n=$(( RANDOM % 100 ))

 if [[ n -eq 42 ]]; then
    echo "Something went wrong"
    >&2 echo "The error was using magic numbers" #>2 output.txt (redirect to a file) or >2& (redirect to stderr)
    exit 1
 fi

 echo "Everything went according to plan"
see failureCheck.sh
4.As we covered in the lecture find’s -exec can be very powerful for performing operations over the files we are searching
for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far
commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but
some commands like tar take inputs from arguments. To bridge this disconnect there’s the xargs command which will execute
a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory.
Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that
your command should work even if the files have spaces (hint: check -d flag for xargs).
find ./HTML/ -type f -name "*.html" | xargs -d '\n' zip HTML.zip
1)Pattern: find . -path '*/test/*.py' -type f (. represents the current directory)
the find command returns:
./HTML/HTML/2.html
./HTML/1.html
which we will later process (notice that different results are separated by '\n')
2)the output of find will piped to xargs, which takes each file name as a separate argument and pass them to zip
5.(Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally,
can you list all files by recency?
find . -type f | xargs -d '\n' ls -lt